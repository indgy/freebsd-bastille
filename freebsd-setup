#!/bin/sh
# This script provisions a fresh FreeBSD install to 
# run the BastilleBSD container management system
# -----------------------------------------------------------------------------
# Function definitions
# -----------------------------------------------------------------------------
# Gets the first DHCP configured NIC from rc.conf
getExtIf() {
  ext_if=`cat /etc/rc.conf | grep -Eo 'ifconfig_([a-z0-9])+="(DHCP|SYNCDHCP)"' | cut -f 1 -d = | cut -f 2 -d _`
}
# Gets the IP of the above NIC
getExtIp() {
  ext_ip=`ifconfig $ext_if | grep inet | cut -f 2 -d ' '`
}
# Reads a yes or no answer
readYesNo() {
  valid="-1"
  while [ "$valid" = "-1" ]
  do
    echo "$1 [y|n] "
    read answer
    if [ "$answer" = "" ]; then
      answer=""
    else
      valid="1"
      case $answer in
        y | Y | yes | YES ) answer="y";;
        n | N | no | NO ) answer="n";;
        *) valid="-1";;
       esac
    fi
  done
}
# Show the install text banner
showBanner() {
  echo ""
  echo ""
  echo "FreeBSD-Bastille Host Provisioning"
  echo "=================================="
  echo ""
  echo "This script provisions a freshly installed FreeBSD system"
  echo "to run the BastilleBSD jail management utility."
  echo ""
  echo ""
}
# Show the setup arguments
displayArgs() {
  printf "

Using the following details:
===========================================================

External interface:     ${ext_if}
External IPv4 address:  ${ext_ip}
Locale:                 ${locale}
Timezone:               ${timezone}

-----------------------------------------------------------

SSH access: 

Port:        ${ssh_server_port}
User:        ${ssh_user}
User key:    ${ssh_user_key}

-----------------------------------------------------------

Mail configuration:

Notify to:   ${mail_to}
HELO as:     ${mail_helo}

Server:      ${mail_host}:${mail_port}
Username:    ${mail_username}
Password:    ${mail_password}
Use SSL:     ${mail_use_ssl}
Use TLS:     ${mail_use_tls}

-----------------------------------------------------------

"
}
# Check the user is root
checkRoot() {
  if [ "$(id -u)" != "0" ]; then
     echo "This script must be run as root" 1>&2
     exit 1
  fi
}
# Add the ssh user
addUser() {
  pw user show $ssh_user
  if [ $? != 0 ]; then
    echo "Adding user ${ssh_user}"
    pw user add -n $ssh_user -d /home/$ssh_user -m -s /bin/tcsh
  fi
  if [ "$ssh_user_key" != "" ]; then
    # setup ssh key access
    echo "Copying public key to authorized_keys"
    mkdir /home/$ssh_user/.ssh
    if [ -f "${ssh_user_key}" ]; then
      cp "${ssh_user_key}" > /home/$ssh_user/.ssh/authorized_keys
      echo "Copied public SSH key from ${ssh_user_key}"
    else 
      fetch --user-agent="${user_agent}" -o /home/$ssh_user/.ssh/authorized_keys $ssh_user_key
      if [ $? = 0 ]; then
        echo "Fetched public SSH key from remote ${ssh_user_key}"
      else  
        echo "${ssh_user_key}" > /home/$ssh_user/.ssh/authorized_keys
        echo "Created public SSH key from variable"
      fi
    fi
    chmod 0600 /home/$ssh_user/.ssh/authorized_keys
    chmod 0700 /home/$ssh_user/.ssh
    chown -R $ssh_user:$ssh_user /home/$ssh_user
  fi
}
# Update the OS
updateOs() {
  if [ `sysctl -n security.jail.jailed` == 0]; then
    echo "Updating the OS"
    env PAGER=cat freebsd-update fetch install --not-running-from-cron
    echo "Done"
  else
    echo "Running in Jail, skipping OS update"
  fi
}
# Do basic setup tasks
setupOs() {

  echo "Set pkg to use latest packages"
  sed -i "" "s/quarterly/latest/" /etc/pkg/FreeBSD.conf
  echo "Bootstrapping packages"
  env ASSUME_ALWAYS_YES=YES pkg bootstrap
  echo "Installing CA Root certificates"
  pkg install -y ca_root_nss
  echo "Done"

  echo "Updating login.conf"
  cp /etc/login.conf /etc/login.conf-original
  echo "# /etc/login.conf - login class capabilities database.
# Generated by bastille-host.sh on `date`
# Remember to rebuild the database after each change to this file:
#	cap_mkdb /etc/login.conf

default:\
	:passwd_format=sha512:\
	:copyright=/etc/COPYRIGHT:\
	:welcome=/etc/motd:\
	:setenv=BLOCKSIZE=K,EDITOR=/usr/bin/edit:\
	:mail=/var/mail/$:\
	:path=/sbin /bin /usr/sbin /usr/bin /usr/local/sbin /usr/local/bin ~/bin:\
	:nologin=/var/run/nologin:\
	:cputime=unlimited:\
	:datasize=unlimited:\
	:stacksize=unlimited:\
	:memorylocked=64K:\
	:memoryuse=unlimited:\
	:filesize=unlimited:\
	:coredumpsize=unlimited:\
	:openfiles=unlimited:\
	:maxproc=unlimited:\
	:sbsize=unlimited:\
	:vmemoryuse=unlimited:\
	:swapuse=unlimited:\
	:pseudoterminals=unlimited:\
	:kqueues=unlimited:\
	:umtxp=unlimited:\
	:priority=0:\
	:ignoretime@:\
	:charset=UTF-8:\
	:lang=${locale}.UTF-8:\
	:umask=022:

#
# A collection of common class names - forward them all to 'default'
# (login would normally do this anyway, but having a class name
#  here suppresses the diagnostic)
#
standard:\
	:tc=default:
xuser:\
	:tc=default:
staff:\
	:tc=default:
daemon:\
	:mail@:\
	:memorylocked=128M:\
	:tc=default:
news:\
	:tc=default:
dialer:\
	:tc=default:

#
# Root can always login
#
# N.B.  login_getpwclass(3) will use this entry for the root account,
#       in preference to 'default'.
root:\
	:ignorenologin:\
	:memorylocked=unlimited:\
	:tc=default:
" > /etc/login.conf
  cap_mkdb /etc/login.conf

  echo "Updating ttys"
  cp /etc/ttys.conf /etc/ttys.conf-original
  echo '# Simplified ttys
# Generated by bastille-host.sh on `date`
console	none				unknown	off secure
ttyv0	"/usr/libexec/getty Pc"		xterm	onifexists secure
' > /etc/ttys

  echo "Reduce boot delay"
  sysrc -f /boot/loader.conf autoboot_delay="4"
  echo "Enabling AESNI hardware encryption support"
  sysrc -f /boot/loader.conf aesni_load=YES

  echo "Setting timezone to ${timezone}"
  cp /usr/share/zoneinfo/$timezone /etc/localtime

  echo "Check for OS updates daily via cron"
  echo "@daily root freebsd-update -t freebsd cron" >> /etc/crontab

  echo "Done"
}
# Make the default shell a bit nicer
configureTcsh() {
  echo "Configuring system cshrc"
  echo '
  # Useful aliases
  alias h         history 25
  alias j         jobs -l
  alias la        ls -a
  alias lf        ls -FA
  alias ll        ls -lA
  alias df        df -H

  # Better environment defaults
  setenv CLICOLOR
  setenv GREP_OPTIONS --color=auto
  setenv EDITOR edit
  setenv PAGER less

  # Copied from /usr/share/skel/dot.cshrc
  if ($?prompt) then
  	# An interactive shell -- set some stuff up
  	set prompt = "%N@%m:%~ %# "
  	set promptchars = "%#"

  	set filec
  	set history = 1000 # the number of history events to save
  	set savehist = (1000 merge)
  	set autolist = ambiguous # possibilities are listed only when no new characters are added	by completion
    set color     # enables color	display	for the	builtin ls -F
    set colorcat  # display colorful NLS	messages
    set nobeep    # beeping is completely disabled
    set padhour   # add leading 0 to hours (Military style)
  	# Use history to aid expansion
  	set autoexpand
  	set autorehash
  	set mail = (/var/mail/$USER)
    set rmstar #Â prompt before rm * is executed
    set rprompt=%P  # Show time of command on the right
  	if ( $?tcsh ) then
  		bindkey "^W" backward-delete-word
  		bindkey -k up history-search-backward
  		bindkey -k down history-search-forward
  	endif
  endif

  # Key fixes for interactive use
  if ($term == "xterm" \
    || $term == "vt100" \
    || $term == "vt102" \
    || $term !~ "con*") then
        # bind keypad keys for console, vt100, vt102, xterm
        bindkey "\e[1~" beginning-of-line  # Home
        bindkey "\e[7~" beginning-of-line  # Home rxvt
        bindkey "\e[2~" overwrite-mode     # Ins
        bindkey "\e[3~" delete-char        # Delete
        bindkey "\e[4~" end-of-line        # End
        bindkey "\e[8~" end-of-line        # End rxvt
  endif

' >> /etc/csh.cshrc
  echo "# Clear the screen on logout
clear" >> /etc/csh.logout
}
# Asks the user if they want to reboot, otherwise quit
confirmReboot() {
  readYesNo "The system is configured and should be rebooted before use, do you want to reboot now?"
  if [ "$answer" = "y" ]; then
    shutdown -r now
  fi
  echo "All done, please make your changes then reboot before using the system";
}
# install and configure doas to execute commands as another user
installDoas() {
  echo "Installing doas"
  pkg install -y doas
  echo "Creating /usr/local/etc/doas.conf"
  echo "
# Allows admin user to elevate to root
# Generated by bastille-host.sh on `date`
permit nopass ${ssh_user} as root" > /usr/local/etc/doas.conf
  echo "Setting ownership and permissions on /usr/local/etc/doas.conf"
  chown root:wheel /usr/local/etc/doas.conf
  chmod 0600 /usr/local/etc/doas.conf
  echo "Done"
}
# install Bastille jail management system
installBastille() {
  echo "Installing Bastille"
  pkg install -y bastille
  echo "Enabling Bastille"
  sysrc bastille_enable=YES
  echo "Configuring Bastille"
  echo "Enabling VNET"
  echo "# Enable VNET for Bastille
# Generated by bastille-host.sh on `date`
[bastille_vnet=13]
add path 'bpf*' unhide
" > /etc/devfs.rules
  echo "Creating cloned interface"
  sysrc cloned_interfaces+=lo1
  sysrc ifconfig_lo1_name="bastille0"
  echo "Bringing cloned interface up"
  service netif cloneup
  echo "Done"
  # @TODO Add revolution helper scripts 
}
# configure installed services
configureAliases() {
  echo "Configuring mail aliases"
  cp /etc/mail/aliases /etc/mail/aliases-original
  echo "# Simplified mail aliases, everything is forwarded to the users email
# Generated by bastille-host.sh on `date`
# Run 'newaliases' after making changes to this file
*:	${mail_to}
" > /etc/aliases
  newaliases
}
configureDma() {
  echo "Configuring DragonFly Mail Agent (DMA)"
  sysrc sendmail_enable=NONE
  echo '# Using DMA for mail delivery, disabling some sendmail chores
# Generated by bastille-host.sh on `date`
# No need to purge sendmail host stats
daily_clean_hoststat_enable="NO"
# Ignore mail rejects
daily_status_mail_rejects_enable="NO"
# DO not submit queue when checking mail status
daily_status_include_submit_mailq="NO"
# Do not submit queue after running queue
daily_submit_queuerun="NO"
' > /etc/periodic.conf
  echo "Creating DMA config"
  if [ "${mail_host}" != "" ]; then
    echo "# DragonFly Mail Agent config
# Generated by bastille-host.sh on `date`

SMARTHOST ${mail_host}
PORT ${mail_port}
" > /etc/dma/dma.conf
    case $mail_use_ssl in
      y | yes | Yes | YES)
        echo "SECURETRANSFER" >> /etc/dma/dma.conf
        ;;
    esac
    case $mail_use_tls in
      y | yes | Yes | YES)
        echo "STARTTLS
      OPPORTUNISTIC_TLS" >> /etc/dma/dma.conf
        ;;
    esac
    if [ "${mail_from}" != "" ]; then
      echo "MASQUERADE ${mail_from}" >> /etc/dma/dma.conf
    fi
    if [ "${mail_helo}" != "" ]; then
      echo "MAILNAME ${mail_helo}" >> /etc/dma/dma.conf
    fi
    if [ "${mail_username}" != "" ]; then
      echo "AUTHPATH /etc/dma/auth.conf" >> /etc/dma/dma.conf
      echo "# DragonFly Mail Agent authentication
# Generated by bastille-host.sh on `date`
# username|host:password

${mail_username}|${mail_host}:${mail_password}
" > /etc/dma/auth.conf
    fi
  fi
  echo "Setting config file permissions" 
  chmod 0640 /etc/dma/dma.conf
  chmod 0640 /etc/dma/auth.conf
  chown root:mail /etc/dma/*.conf
  echo "Modifying mailer.conf"
  echo "# Use DragonFly Mail Agent
# Generated by bastille-host.sh on `date`
sendmail    /usr/libexec/dma
mailq       /usr/libexec/dma
newaliases  /usr/libexec/dma
hoststat    /usr/libexec/dma
purgestat   /usr/libexec/dma
" > /etc/mail/mailer.conf
  echo "Removing unnecessary Sendmail files"
  rm /etc/mail/Makefile /etc/mail/README /etc/mail/helpfile /etc/mail/*.cf /etc/mail/*.sample /etc/mail/*.mc
  echo "Done"
}
configureBlacklistd() {
  echo "Configuring Blacklistd"
  sysrc blacklistd_enable=YES
  sysrc blacklistd_flags=-r
  mv /etc/blacklistd.conf /etc/blacklistd.conf-original
  echo "# Custom Blacklistd configuration to protect SSH only
[local] 
# Rules for the internal services on this machine
# adr/mask:port                 type    proto   owner           name    nfail   disable
ssh                             stream  *       *               *       6       24h
*                               *       *       *               *       3       60

[remote]
# Rules for the external machines connecting to this machine
# adr/mask:port type            proto   owner           name    nfail   disable
" > /etc/blacklistd.conf
  echo "Done"
}
configurePf() {
  echo "Configuring PF"
  echo "# Default BastilleBSD networking setup as described at
# https://bastille.readthedocs.io/en/latest/chapters/networking.html
# Generated by bastille-host.sh on `date`
ext_if=\"${ext_if}\"
ssh_port=\"${ssh_server_port}\"

set block-policy return
scrub in on \$ext_if all fragment reassemble
set skip on lo

table <jails> persist

nat on \$ext_if from <jails> to any -> (\$ext_if:0)
rdr-anchor \"rdr/*\" 
anchor \"blacklistd/*\" in on \$ext_if

block in all
pass out quick keep state

# This may need to be removed when using vnet and sharing the same subnet
antispoof for \$ext_if inet 

pass in inet proto tcp from any to any port \$ssh_port flags S/SA modulate state

" > /etc/pf.conf
  sysrc -f /boot/loader.conf pf_load=YES
  echo "Done"
}
configureNtp() {
  # update rc.conf
  echo "Configuring ntpd"
  sysrc ntpd_enable="YES"
  sysrc ntpd_flags+="-g"
  sysrc ntpd_sync_on_start="YES"
  # Pick nearest servers from the pool
  # server 0.xx.pool.ntp.org
  # server 1.xx.pool.ntp.org
  # server 2.xx.pool.ntp.org
  # server 3.xx.pool.ntp.org
  echo "Done"
}
configureSsh() {
  echo "Configuring sshd"
  # update rc.conf
  sysrc sshd_enable=YES
  mv /etc/ssh/sshd_config /etc/ssh/sshd_config.original 
  # replace with custom config
  echo "# Minimal SSHd config
# Generated by bastille-host.sh on `date`
Port ${ssh_server_port}
ListenAddress ${ext_ip}
AuthorizedKeysFile	.ssh/authorized_keys
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM no
UseBlacklist yes
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no
X11UseLocalhost no
#MaxStartups 10:30:100
Subsystem	sftp	/usr/libexec/sftp-server
" > /etc/ssh/sshd_config
}
# generate an empty conf file
generateConf() {
  filename=$1
  if [ "$filename" = "" ]; then
    filename="setup.conf"
  fi
  if [ -f $filename ]; then
    echo "The file ${filename} already exists, please remove or rename it, or pass a different filename"
    exit 0
  fi
  echo "# Minimal Host Setup config file
# Override this config file by passing arguments on the command line
#   ./setup -c=./setup.conf --ssh-server-port=2222

#
# Required arguments
#
# The name of an admin user to ssh in and doas to root
ssh_user=
# The public key for the admin user
ssh_user_key=
# The SSH server port, it is highly recommended that you change this
ssh_server_port=\"22\"
# The server locale as set in login.conf, see /usr/share/locales
locale=
# The server timezone, see /usr/share/zoneinfo
timezone=\"UTC\"
# The email address to forward roots' mail to
mail_to=

#
# Optional arguments
#
# Specify the external interface name
ext_if=
# Specify the external IP to use in PF and SSHD config
ext_ip=

# Specify the upstream mail server hostname
mail_host=
# Specify the upstream mail server port
mail_port=
# Use SSL when connecting to the upstream mail server
mail_use_ssl=
# Use TLS when connecting to the upstream mail server
mail_use_tls=
# Username to authenticate on the upstream mail server
mail_username=
# Password for the upstream mail server
mail_password=
# Specify the mail From address
mail_from=
# Specify the connecting server hostname
mail_helo=
" > $filename
  echo "Created $filename"
}
# display usage info
showUsage() {
    printf "
Usage: ./setup -c=/path/to/config.file

  --help -h         - Shows this help
  --config -c       - Populate arguments from config file at path or url
                      The file must contain the required arguments below
  --g [name]        - Generate a setup.conf file, pass name to override

Required arguments

  --ssh-user        - Username of an admin user who will 'doas' to root
  --ssh-user-key    - Admin users public key for ~/.ssh/authorized_keys
  --ssh-server-port - SSH server port
  --mail-to         - Email address to forward all meshowUsages to

Optional arguments

  --ext-if          - Specify the external network interface for PF
  --ext-ip          - Specify the external IPv4 address for PF and SSHd
  --locale          - Set the login.conf locale
  --timezone        - Set the server timezone
  --mail-host       - Upstream mailserver hostname
  --mail-port       - Upstream mailserver port
  --mail-use-ssl    - Use SSL when connecting to the upstream mailserver
  --mail-use-tls    - Use TLS when connecting to the upstream mailserver
  --mail-username   - Upstream mailserver username
  --mail-password   - Upstream mailserver password
  --mail-from       - Masquerade as when sending mail
  --mail-helo       - Specify the hostname in HELO|EHLO

"
}
showLocales() {
  `ls -d /usr/share/locale/*.UTF-8 | grep -Eo '([a-z]{2}_[A-Z]{2})' | column`
}
showTimezones() {
  `ls /usr/share/zoneinfo/ | grep -E '([A-Z\-]+)' | column`
}
# -----------------------------------------------------------------------------
# Set defaults
# -----------------------------------------------------------------------------
user_agent="Mozilla/5.0 (X11; U; FreeBSD amd64; en-GB;)" # required for fetch
ext_if=""
ext_ip=""
locale="C"
timezone="UTC"
ssh_user=""
ssh_user_key=""
ssh_server_port="22"
mail_to=""
mail_from=""
mail_host=""
mail_port=""
mail_helo=""
mail_username=""
mail_password=""
mail_helo=`hostname`
mail_use_ssl=""
mail_use_tls=""
# -----------------------------------------------------------------------------
# Set command line arguments
# -----------------------------------------------------------------------------
while [ "$1" != "" ]; do
    param=`echo $1 | awk -F= '{print $1}'`
    value=`echo $1 | awk -F= '{print $2}'`
    case $param in
        -h | --help)
            showUsage
            exit
            ;;
        -c | --config)
            config_file=$value
            ;;
        -g | --generate-conf)
            generateConf $value
            exit 0
            ;;
        --ssh-user)
            ssh_user=$value
            ;;
        --ssh-user-key)
            ssh_user_key=$value
            ;;
        --ssh-server-port)
            ssh_server_port=$value
            ;;
        --mail-to)
            mail_to=$value
            ;;
        --mail-from)
            mail_from=$value
            ;;
        --mail-host)
            mail_host=$value
            ;;
        --mail-port)
            mail_port=$value
            ;;
        --mail-helo)
            mail_helo=$value
            ;;
        --mail-use-ssl)
            mail_use_ssl="Yes"
            ;;
        --mail-use-tls)
            mail_use_tls="Yes"
            ;;
        --mail-username)
            mail_username=$value
            ;;
        --mail-password)
            mail_password=$value
            ;;
        --ext-if)
            ext_if=$value
            ;;
        --ext-ip)
            ext_ip=$value
            ;;
        --locale)
            locale=$value
            ;;
        --timezone)
            timezone=$value
            ;;
        *)
            echo "ERROR: unknown argument '$param'"
            showUsage
            exit 1
            ;;
    esac
    shift
done
# -----------------------------------------------------------------------------
# Source config file
# -----------------------------------------------------------------------------
if [ "$config_file" != "" ]; then
  if [ ! -f $config_file ]; then
    echo "Fetching remote config file from ${config_file}"
    fetch --user-agent="${user_agent}" $config_file
    echo "Reading config file " basename $config_file
    $config_file=`basename $config_file`
    . $config_file
  elif [ -f $config_file ]; then
    echo "Reading local config file from ${config_file}"
    . $config_file
  else
    echo "Failed reading config file from ${config_file}"
    exit 1
  fi
fi
# -----------------------------------------------------------------------------
# Sanity check arguments
# -----------------------------------------------------------------------------
if [ "$ssh_user" = "" ]; then
  printf "\n!! Please specify the ssh-user\n\n"; showUsage; exit 0
fi
if [ "$ssh_user_key" = "" ]; then
  printf "\n!! Please specify the ssh-user-key\n\n"; showUsage; exit 0
fi
if [ "$ssh_server_port" = "" ]; then
  printf "\n!! Please specify the ssh-server-port\n\n"; showUsage; exit 0
fi
if [ "$mail_to" = "" ]; then
  printf "\n!! Please specify the root-email\n\n"; showUsage; exit 0
fi
# if [ "$mail_host" = "" ]; then
#   printf "\n!! Please specify the outgoing mail-server\n\n"; showUsage; exit 0
# fi
# if [ "$mail_port" = "" ]; then
#   printf "\n!! Please specify the outgoing mail-port\n\n"; showUsage; exit 0
# fi
# if [ "$mail_username" = "" ]; then
#   printf "\n!! Please specify the outgoing mail-username\n\n"; showUsage; exit 0
# fi
# if [ "$mail_password" = "" ]; then
#   printf "\n!! Please specify the outgoing mail-password\n\n"; showUsage; exit 0
# fi
if [ ! -d "/usr/share/locale/${locale}.UTF-8" ]; then
  printf "\n!! Please specify a UTF-8 locale from '/usr/share/locale'\n\n"; showLocales; exit 0
fi
if [ ! -f "/usr/share/zoneinfo/${timezone}" ]; then
  printf "\n!! Please specify a timezone from '/usr/share/zoneinfo'\n\n"; showTimezones; exit 0
fi
# -----------------------------------------------------------------------------
# Set ext_if and ip if empty
# -----------------------------------------------------------------------------
if [ "${ext_if}" = "" ]; then
  getExtIf
fi
if [ "${ext_ip}" = "" ]; then
  getExtIp
fi
# -----------------------------------------------------------------------------
# Run setup
# -----------------------------------------------------------------------------
# Must run as root
checkRoot
# Display arguments
displayArgs
# Setup OS and configure base services
setupOs
configureTcsh
configureNtp
configurePf
configureBlacklistd
configureSsh
configureAliases
configureDma 
# Add the ssh-user
addUser
# Install minimal system tools
installDoas
installBastille
# Finally update the os
updateOs
# finish up
confirmReboot
